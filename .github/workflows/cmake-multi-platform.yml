# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Ninja on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install ninja-build

    - name: Install Ninja on Windows
      if: runner.os == 'Windows'
      run: choco install ninja

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "SPDLOG_PROJECT_DIR=${{ github.workspace }}/spdlog" >> "$GITHUB_ENV"
        echo "SPDLOG_HOME=${{ github.workspace }}/spdlog-install" >> "$GITHUB_ENV"

    - name: Install spdlog
      shell: bash
      run: |
        echo $SPDLOG_PROJECT_DIR
        echo $SPDLOG_HOME
        git clone https://github.com/gabime/spdlog.git $SPDLOG_PROJECT_DIR
        cd $SPDLOG_PROJECT_DIR
        cmake -G Ninja -B ./build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DSPDLOG_BUILD_SHARED=OFF \
          -DSPDLOG_ENABLE_PCH=ON \
          -DSPDLOG_BUILD_PIC=ON \
          -DSPDLOG_USE_STD_FORMAT=OFF \
          -DSPDLOG_BUILD_EXAMPLE=OFF \
          -DCMAKE_INSTALL_PREFIX=$SPDLOG_HOME
        cmake --build ./build -j 8
        cmake --install ./build --prefix $SPDLOG_HOME

    - name: Configure CMake and Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash
      run: >
        bash scripts/build-yutils.sh
    
    - name: Test ArgParser Windows
      shell: bash
      if: runner.os == 'Windows'
      run: >
        ./build/examples/ArgParserExample.exe

    - name: Test Serializer Example Windows
      shell: bash
      if: runner.os == 'Windows'
      run: >
        ./build/examples/SerializerExample.exe
      
