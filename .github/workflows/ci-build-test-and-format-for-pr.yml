name: "[CI] Build, Test, and Format"
on:
  pull_request_target:
    branches: [ "main" ]
  # pull_request_target:
  #   types: [opened, synchronize]

jobs:
  check_last_commit:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.whether_to_skip_ci.outputs.skip }}
    steps:
      - name: Switch to the PR Source branch
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Whether to Skip CI
        id: whether_to_skip_ci
        shell: bash
        run: |
          last_commit_user=$(git log -1 --pretty=format:'%an')
          echo "Last Commit User: $last_commit_user"
          last_commit_email=$(git log -1 --pretty=format:'%ae')
          echo "Last Commit Email: $last_commit_email"
          last_commit_message=$(git log -1 --pretty=format:'%s')
          echo "Last Commit Message: $last_commit_message"
          if [[ "$last_commit_message" == *"[SKIP CI]"* ]]; then 
            echo "CI should be skipped."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else 
            echo "CI should not be skipped."
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: check_last_commit
    if: ${{ needs.check_last_commit.outputs.skip != 'true' }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Ninja on Linux
      if: runner.os == 'Linux'
      run: sudo apt-get install ninja-build

    - name: Install Ninja on Windows
      if: runner.os == 'Windows'
      run: choco install ninja

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "SPDLOG_PROJECT_DIR=${{ github.workspace }}/spdlog" >> "$GITHUB_ENV"
        echo "SPDLOG_HOME=${{ github.workspace }}/spdlog-install" >> "$GITHUB_ENV"

    - name: Install spdlog
      shell: bash
      run: |
        bash scripts/install-spdlog.sh --src=$SPDLOG_PROJECT_DIR --prefix=$SPDLOG_HOME

    - name: Configure CMake and Build
      shell: bash
      run: >
        bash scripts/build-yutils.sh
        
  clang-format:
    needs: [check_last_commit, build]
    if: ${{ needs.check_last_commit.outputs.skip != 'true' }} 
    runs-on: ubuntu-latest
    steps:
        
    - name: Switch to the PR Source branch
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.PAT }}
        
    - name: Install clang-format
      run: sudo apt-get install clang-format

    - name: Run clang-format
      run: |
        clang-format  \
          -i $(find . -name '*.cpp' -o -name '*.hpp' -o -name '*.h' -o -name '*.c')

    - name: Check for uncommitted changes
      id: format_check
      run: |
        # Check if clang-format introduced any changes
        if [[ `git status --porcelain` ]]; then
          echo "Files were not properly formatted. The changes will be pushed to branch main."
          echo "format_status=fail" >> $GITHUB_OUTPUT
        else
          echo "All files are properly formatted."
          echo "format_status=pass" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push formatted code
      if : ${{ steps.format_check.outputs.format_status == 'fail' }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git commit -am "[SKIP CI] Auto-format code with clang-format"
        git push origin HEAD:${{ github.event.pull_request.head.ref }}

